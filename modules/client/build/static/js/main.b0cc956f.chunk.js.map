{"version":3,"sources":["components/AccountManager.tsx","adapters/aave.ts","adapters/index.ts","App.tsx","index.tsx"],"names":["AccountManager","addressBook","setAddressBookJson","Typography","addresses","length","filter","a","isSelf","v1MarketAddresses","name","address","map","row","category","AddressCategories","Defi","aaveAddresses","appAddresses","store","getLocalStore","localStorage","logger","getLogger","AddressBookStore","StoreKeys","AddressBook","App","useState","load","addressBookJson","getAddressBook","json","setAddressBook","useEffect","console","log","newAddressBookJson","appEntry","some","entry","smeq","push","mergeAppAddresses","save","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sXAOaA,EAAiB,SAAC,GAMxB,IALLC,EAKI,EALJA,YACAC,EAII,EAJJA,mBAKA,OAAQ,qCACN,cAACC,EAAA,EAAD,6CAEIF,EAAYG,UAAUC,OAF1B,+BAIIJ,EAAYG,UAAUE,QAAO,SAAAC,GAAC,OAAIN,EAAYO,OAAOD,MAAIF,OAJ7D,eAQA,cAACF,EAAA,EAAD,2BAEkC,oBAAvBD,EAAoC,GAAK,OAFpD,wC,gBCNEO,EAAoB,CACxB,CAAEC,KAAM,OAAQC,QAAS,8CACzB,CAAED,KAAM,OAAQC,QAAS,+CAIzBC,KAAI,SAAAC,GAAG,kCAAUA,GAAV,IAAeC,SAAUC,oBAAkBC,UAEvCC,EAAa,YACrBR,GCpBQS,EAAY,YACpBD,GCECE,EAAQC,wBAAcC,cACtBC,EAASC,oBAAU,QAIVC,EACXC,YADFC,YAyCaC,EA7BO,WAGpB,MAA8CC,mBAAST,EAAMU,KAAKL,IAAlE,mBAAOM,EAAP,KAAwB5B,EAAxB,KAGA,EAAsC0B,mBAASG,yBAAe,CAC5DC,KAAMF,EACNR,YAFF,mBAAOrB,EAAP,KAAoBgC,EAApB,KAgBA,OAXAC,qBAAU,WACR,GAAKJ,EAAL,CACAK,QAAQC,IAAR,qBAA0BN,EAAgBzB,OAA1C,0BACA,IAAMgC,EAvBgB,SAACP,GAAuD,IAAD,gBACxDZ,GADwD,yBACpEoB,EADoE,QAExER,EAAgBS,MAAK,SAAAC,GAAK,OAAIC,eAAKD,EAAM7B,QAAS2B,EAAS3B,aAC9DmB,EAAgBY,KAAKJ,IAFzB,2BAAsC,IADyC,8BAM/E,OAAOR,EAiBsBa,CAAkBb,GAC7CX,EAAMyB,KAAKpB,EAAkBa,GAC7BJ,EAAeF,yBAAe,CAC5BC,KAAMK,EACNf,eAED,CAACQ,IAGF,qBAAKe,UAAU,MAAf,SACE,cAAC,EAAD,CAAgB5C,YAAaA,EAAaC,mBAAoBA,OC5CpE4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b0cc956f.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  AddressBook,\n  AddressBookJson,\n} from \"@valuemachine/types\";\n\nexport const AccountManager = ({\n  addressBook,\n  setAddressBookJson,\n}: {\n  addressBook: AddressBook\n  setAddressBookJson: (val: AddressBookJson) => void\n}) => {\n  return (<>\n    <Typography>\n      {`Our addressBook contains ${\n        addressBook.addresses.length\n      } addresses of which ${\n        addressBook.addresses.filter(a => addressBook.isSelf(a)).length\n      } are ours`}\n    </Typography>\n\n    <Typography>\n      {`We are ${\n        typeof setAddressBookJson === \"function\" ? \"\" : \"NOT \"\n      }able to update the addressBook`}\n    </Typography>\n  </>);\n};\n","import {\n  AddressBook,\n  AddressBookJson,\n  AddressCategories,\n  ChainData,\n  EthTransaction,\n  Logger,\n  Transaction,\n  TransactionSource,\n} from \"@valuemachine/types\";\nimport {\n  smeq,\n  rmDups,\n} from \"@valuemachine/utils\";\n\nexport const aaveSource = \"Aave\";\n\nconst v1MarketAddresses = [\n  { name: \"aETH\", address: \"0x3a3a65aab0dd2a17e3f1947ba16138cd37d08c04\" },\n  { name: \"aDAI\", address: \"0xfc1e690f61efd961294b3e1ce3313fbd8aa4f85d\" },\n  // TODO: add more Aave contract addresses\n  // v1: https://docs.aave.com/developers/v/1.0/deployed-contracts/deployed-contract-instances\n  // v2: https://docs.aave.com/developers/deployed-contracts/deployed-contracts\n].map(row => ({ ...row, category: AddressCategories.Defi })) as AddressBookJson;\n\nexport const aaveAddresses = [\n  ...v1MarketAddresses,\n];\n\n////////////////////////////////////////\n/// Parser\n\nexport const aaveParser = (\n  tx: Transaction,\n  ethTx: EthTransaction,\n  _addressBook: AddressBook,\n  _chainData: ChainData,\n  _logger: Logger,\n): Transaction => {\n\n  if (aaveAddresses.some(entry => smeq(ethTx.from as string, entry.address as string))) {\n    tx.sources = rmDups([aaveSource, ...tx.sources]) as TransactionSource[];\n  }\n\n  // TODO: implement this for real\n\n  return tx;\n};\n","import { aaveSource, aaveAddresses, aaveParser } from \"./aave\";\n\nexport const appSources = [\n  aaveSource,\n];\n\nexport const appAddresses = [\n  ...aaveAddresses,\n];\n\nexport const appParsers = [\n  aaveParser,\n];\n","import { getLogger, getLocalStore, smeq } from \"@valuemachine/utils\";\nimport { AddressBookJson, StoreKeys } from \"@valuemachine/types\";\nimport React, { useState, useEffect } from \"react\";\nimport { getAddressBook } from \"valuemachine\";\n\nimport \"./App.css\";\nimport { AccountManager } from \"./components/AccountManager\";\nimport { appAddresses } from \"./adapters\";\n\nconst store = getLocalStore(localStorage as any);\nconst logger = getLogger(\"warn\");\n\n// localstorage keys\nconst {\n  AddressBook: AddressBookStore,\n} = StoreKeys;\n\nconst mergeAppAddresses = (addressBookJson: AddressBookJson): AddressBookJson => {\n  for (const appEntry of appAddresses) {\n    if (!addressBookJson.some(entry => smeq(entry.address, appEntry.address))) {\n      addressBookJson.push(appEntry);\n    }\n  }\n  return addressBookJson;\n};\n\nconst App: React.FC = () => {\n\n  // Load stored JSON data from localstorage\n  const [addressBookJson, setAddressBookJson] = useState(store.load(AddressBookStore));\n\n  // Parse JSON data into utilities\n  const [addressBook, setAddressBook] = useState(getAddressBook({\n    json: addressBookJson,\n    logger,\n  }));\n\n  useEffect(() => {\n    if (!addressBookJson) return;\n    console.log(`Refreshing ${addressBookJson.length} address book entries`);\n    const newAddressBookJson = mergeAppAddresses(addressBookJson);\n    store.save(AddressBookStore, newAddressBookJson);\n    setAddressBook(getAddressBook({\n      json: newAddressBookJson,\n      logger\n    }));\n  }, [addressBookJson]);\n\n  return (\n    <div className=\"App\">\n      <AccountManager addressBook={addressBook} setAddressBookJson={setAddressBookJson}/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}